/**
 * GSRCDN Security Module v1.0.0
 * Minified version for CDN distribution
 */
!function(e){"use strict";class t{constructor(e={}){this.config={scriptUrl:e.scriptUrl||"",apiToken:e.apiToken||"",hmacSecret:e.hmacSecret||"",debug:e.debug||!1},"undefined"==typeof CryptoJS&&console.error("GSRCDN Security: CryptoJS is required. Please include it before this module.")}configure(e){this.config={...this.config,...e}}computeHMAC(e,t){if("undefined"==typeof CryptoJS)throw new Error("CryptoJS is not available");return CryptoJS.HmacSHA256(e,t).toString()}createSignature(e,t){const r=Object.keys(e).sort().map(t=>`${t}=${e[t]}`).join("&");return this.config.debug&&console.log("GSRCDN Signature String:",r),this.computeHMAC(r,t)}async makeSecureRequest(e,t={}){try{const r={scriptUrl:t.scriptUrl||this.config.scriptUrl,apiToken:t.apiToken||this.config.apiToken,hmacSecret:t.hmacSecret||this.config.hmacSecret,debug:void 0!==t.debug?t.debug:this.config.debug};if(!r.scriptUrl)throw new Error("Script URL is required");if(!r.apiToken)throw new Error("API token is required");if(!r.hmacSecret)throw new Error("HMAC secret is required");e.token=r.apiToken,e.timestamp=Date.now().toString(),e.referrer=window.location.origin,e.origin=window.location.origin,e.signature=this.createSignature(e,r.hmacSecret);const o=new URL(r.scriptUrl);if(Object.keys(e).forEach(t=>{o.searchParams.append(t,e[t])}),r.debug&&(console.log("GSRCDN Request URL:",o.toString()),console.log("GSRCDN Request Params:",e)),!(s=await fetch(o,{method:"GET",headers:{"Content-Type":"application/json"}})).ok)throw new Error(`HTTP error! status: ${s.status}`);var s;const i=await s.json();if(r.debug&&console.log("GSRCDN Response:",i),"success"===i.status)return i;throw new Error(i.message||"Request failed")}catch(e){throw console.error("GSRCDN Secure Request Error:",e),e}}validateResponse(e,t){if(!e.signature)return console.warn("GSRCDN: Response does not contain signature"),!1;const{signature:r,...o}=e;return r===this.createSignature(o,t||this.config.hmacSecret)}getConfig(){return{scriptUrl:this.config.scriptUrl,debug:this.config.debug,hasToken:!!this.config.apiToken,hasSecret:!!this.config.hmacSecret}}}const r=new t;e.GSRCDNSecurity=t,e.gsrcdnSecurity=r,e.computeHMAC=(e,t)=>r.computeHMAC(e,t),e.createSignature=(e,t)=>r.createSignature(e,t),e.makeSecureRequest=(e,t)=>r.makeSecureRequest(e,t),r.config.debug&&console.log("GSRCDN Security Module loaded successfully")}(window);
